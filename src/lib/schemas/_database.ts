/*
 * ==========================================
 * |          GENERATED BY SUPAZOD          |
 * ==========================================
 */

import { z } from "zod";
import { type Json } from "./database.types";

export const jsonSchema: z.ZodSchema<Json> = z.lazy(() =>
  z
    .union([
      z.string(),
      z.number(),
      z.boolean(),
      z.record(z.union([jsonSchema, z.undefined()])),
      z.array(jsonSchema),
    ])
    .nullable(),
);

export const iconRowSchema = z.object({
  created_at: z.string(),
  id: z.number(),
  jsx: z.string(),
  name: z.string(),
  provider_id: z.number(),
  source_url: z.string(),
  svg: z.string(),
  tags: z.array(z.string()).nullable(),
  version: z.string(),
});

export const iconInsertSchema = z.object({
  created_at: z.string(),
  id: z.number().optional(),
  jsx: z.string(),
  name: z.string(),
  provider_id: z.number(),
  source_url: z.string(),
  svg: z.string(),
  tags: z.array(z.string()).optional().nullable(),
  version: z.string(),
});

export const iconUpdateSchema = z.object({
  created_at: z.string().optional(),
  id: z.number().optional(),
  jsx: z.string().optional(),
  name: z.string().optional(),
  provider_id: z.number().optional(),
  source_url: z.string().optional(),
  svg: z.string().optional(),
  tags: z.array(z.string()).optional().nullable(),
  version: z.string().optional(),
});

export const iconRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("icon_provider_id_fkey"),
    columns: z.tuple([z.literal("provider_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("provider"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const licenseRowSchema = z.object({
  created_at: z.string(),
  id: z.number(),
  provider_id: z.number(),
  type: z.string(),
  url: z.string(),
});

export const licenseInsertSchema = z.object({
  created_at: z.string().optional(),
  id: z.number().optional(),
  provider_id: z.number(),
  type: z.string(),
  url: z.string(),
});

export const licenseUpdateSchema = z.object({
  created_at: z.string().optional(),
  id: z.number().optional(),
  provider_id: z.number().optional(),
  type: z.string().optional(),
  url: z.string().optional(),
});

export const licenseRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("license_provider_id_fkey"),
    columns: z.tuple([z.literal("provider_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("provider"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const providerRowSchema = z.object({
  created_at: z.string(),
  git_branch: z.string(),
  git_icons_dir: z.string(),
  git_url: z.string(),
  id: z.number(),
  name: z.string(),
});

export const providerInsertSchema = z.object({
  created_at: z.string().optional(),
  git_branch: z.string(),
  git_icons_dir: z.string(),
  git_url: z.string(),
  id: z.number().optional(),
  name: z.string(),
});

export const providerUpdateSchema = z.object({
  created_at: z.string().optional(),
  git_branch: z.string().optional(),
  git_icons_dir: z.string().optional(),
  git_url: z.string().optional(),
  id: z.number().optional(),
  name: z.string().optional(),
});

export const publicGtrgmCompressArgsSchema = z.object({
  "": z.unknown(),
});

export const publicGtrgmCompressReturnsSchema = z.unknown();

export const publicGtrgmDecompressArgsSchema = z.object({
  "": z.unknown(),
});

export const publicGtrgmDecompressReturnsSchema = z.unknown();

export const publicGtrgmInArgsSchema = z.object({
  "": z.unknown(),
});

export const publicGtrgmInReturnsSchema = z.unknown();

export const publicGtrgmOptionsArgsSchema = z.object({
  "": z.unknown(),
});

export const publicGtrgmOptionsReturnsSchema = z.undefined();

export const publicGtrgmOutArgsSchema = z.object({
  "": z.unknown(),
});

export const publicGtrgmOutReturnsSchema = z.unknown();

export const publicSearchIconsAndArgsSchema = z.object({
  version_filter: z.string(),
  result_limit: z.number().optional(),
  result_offset: z.number().optional(),
  search_terms: z.array(z.string()),
});

export const publicSearchIconsAndReturnsSchema = z.array(
  z.object({
    id: z.number(),
    created_at: z.string(),
    version: z.string(),
    name: z.string(),
    svg: z.string(),
    source_url: z.string(),
    provider_id: z.number(),
    jsx: z.string(),
    tags: z.array(z.string()),
  }),
);

export const publicSearchIconsOrArgsSchema = z.object({
  result_offset: z.number().optional(),
  result_limit: z.number().optional(),
  version_filter: z.string(),
  exclude_ids: z.array(z.number()),
  search_terms: z.array(z.string()),
});

export const publicSearchIconsOrReturnsSchema = z.array(
  z.object({
    name: z.string(),
    tags: z.array(z.string()),
    svg: z.string(),
    source_url: z.string(),
    provider_id: z.number(),
    jsx: z.string(),
    id: z.number(),
    created_at: z.string(),
    version: z.string(),
  }),
);

export const publicSetLimitArgsSchema = z.object({
  "": z.number(),
});

export const publicSetLimitReturnsSchema = z.number();

export const publicShowLimitArgsSchema = z.object({});

export const publicShowLimitReturnsSchema = z.number();

export const publicShowTrgmArgsSchema = z.object({
  "": z.string(),
});

export const publicShowTrgmReturnsSchema = z.array(z.string());
